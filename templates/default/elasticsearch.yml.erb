##################### ElasticSearch Configuration Example #####################

# This file contains an overview of various configuration settings,
# targeted at operations staff. Application developers should
# consult the guide at <http://elasticsearch.org/guide>.
#

################################### Cluster ###################################

cluster.name: <%= node['elasticsearch']['clustername'] %>

#################################### Node #####################################

node.name: <%= node['fqdn'] %>

#################################### Index ####################################

index.number_of_shards: <%= node['elasticsearch']['number_shards'] %>
index.number_of_replicas: <%= node['elasticsearch']['number_replicas'] %>

#################################### Paths ####################################

path.data: <%= node['elasticsearch']['server_data'] %>
path.logs: <%= node['elasticsearch']['server_logs'] %>
path.plugins: <%= node['elasticsearch']['server_plugins'] %>

<% if node['elasticsearch']['plugins'] %>
#################################### Plugin ###################################

# plugin.mandatory: <%= node['elasticsearch']['plugins'] %>

<% end %>
################################### Memory ####################################

bootstrap.mlockall: <%= node['elasticsearch']['mem_mlock'] %>

############################## Network And HTTP ###############################

network.bind_host: <%= node['elasticsearch']['bind_host'] %> 
<% if node['elasticsearch']['publish_host'] %>
network.publish_host: <%= node['elasticsearch']['publish_host'] %>
network.host: <%= node['elasticsearch']['publish_host'] %>
<% end %>
<% if node['elasticsearch']['port_tcp'] %>
transport.tcp.port: <%= node['elasticsearch']['port_tcp'] %>
<% end %>
<% if node['elasticsearch']['port_http'] %>
http.port: <%= node['elasticsearch']['port_http'] %>
<% end %>
<% if node['elasticsearch']['http_disable']  %>
http.enabled: false
<% end %>


# Enable compression for all communication between nodes (disabled by default):
#
# transport.tcp.compress: true

# Set a custom allowed content length:
#
# http.max_content_length: 100mb

################################### Gateway ###################################

# The gateway allows for persisting the cluster state between full cluster
# restarts. Every change to the state (such as adding an index) will be stored
# in the gateway, and when the cluster starts up for the first time,
# it will read its state from the gateway.

# There are several types of gateway implementations. For more information,
# see <http://elasticsearch.org/guide/reference/modules/gateway>.

# The default gateway type is the "local" gateway (recommended):
#
# gateway.type: local

# Settings below control how and when to start the initial recovery process on
# a full cluster restart (to reuse as much local data as possible when using shared
# gateway).

# Allow recovery process after N nodes in a cluster are up:
#
# gateway.recover_after_nodes: 1

# Set the timeout to initiate the recovery process, once the N nodes
# from previous setting are up (accepts time value):
#
# gateway.recover_after_time: 5m

# Set how many nodes are expected in this cluster. Once these N nodes
# are up (and recover_after_nodes is met), begin recovery process immediately
# (without waiting for recover_after_time to expire):
#
# gateway.expected_nodes: 2


############################# Recovery Throttling #############################

# These settings allow to control the process of shards allocation between
# nodes during initial recovery, replica allocation, rebalancing,
# or when adding and removing nodes.

# Set the number of concurrent recoveries happening on a node:
#
# 1. During the initial recovery
#
# cluster.routing.allocation.node_initial_primaries_recoveries: 4
#
# 2. During adding/removing nodes, rebalancing, etc
#
# cluster.routing.allocation.node_concurrent_recoveries: 2

# Set to throttle throughput when recovering (eg. 100mb, by default unlimited):
#
# indices.recovery.max_size_per_sec: 0

# Set to limit the number of open concurrent streams when
# recovering a shard from a peer:
#
# indices.recovery.concurrent_streams: 5


################################## Discovery ##################################

# Discovery infrastructure ensures nodes can be found within a cluster
# and master node is elected. Multicast discovery is the default.

# Set to ensure a node sees N other master eligible nodes to be considered
# operational within the cluster. Set this option to a higher value (2-4)
# for large clusters (>3 nodes):
#
# discovery.zen.minimum_master_nodes: 1

# Set the time to wait for ping responses from other nodes when discovering.
# Set this option to a higher value on a slow or congested network
# to minimize discovery failures:
#
# discovery.zen.ping.timeout: 3s

# See <http://elasticsearch.org/guide/reference/modules/discovery/zen.html>
# for more information.

# Unicast discovery allows to explicitly control which nodes will be used
# to discover the cluster. It can be used when multicast is not present,
# or to restrict the cluster communication-wise.
#
# 1. Disable multicast discovery (enabled by default):
#
# discovery.zen.ping.multicast.enabled: false
#
# 2. Configure an initial list of master nodes in the cluster
#    to perform discovery when new nodes (master or data) are started:
#
# discovery.zen.ping.unicast.hosts: ["host1", "host2:port", "host3[portX-portY]"]
<% if not node['elasticsearch']['multicast'] %>
discovery.zen.ping.multicast.enabled: false
discovery.zen.ping.unicast.hosts: <%= node['elasticsearch']['unicast_hosts'] -%>
<% end %>


# EC2 discovery allows to use AWS EC2 API in order to perform discovery.
#
# You have to install the cloud-aws plugin for enabling the EC2 discovery.
#
# See <http://elasticsearch.org/guide/reference/modules/discovery/ec2.html>
# for more information.
#
# See <http://elasticsearch.org/tutorials/2011/08/22/elasticsearch-on-ec2.html>
# for a step-by-step tutorial.


################################## Slow Log ##################################

# Shard level query and fetch threshold logging.

#index.search.slowlog.level: TRACE
#index.search.slowlog.threshold.query.warn: 10s
#index.search.slowlog.threshold.query.info: 5s
#index.search.slowlog.threshold.query.debug: 2s
#index.search.slowlog.threshold.query.trace: 500ms

#index.search.slowlog.threshold.fetch.warn: 1s
#index.search.slowlog.threshold.fetch.info: 800ms
#index.search.slowlog.threshold.fetch.debug: 500ms
#index.search.slowlog.threshold.fetch.trace: 200ms

################################## GC Logging ################################

#monitor.jvm.gc.ParNew.warn: 1000ms
#monitor.jvm.gc.ParNew.info: 700ms
#monitor.jvm.gc.ParNew.debug: 400ms

#monitor.jvm.gc.ConcurrentMarkSweep.warn: 10s
#monitor.jvm.gc.ConcurrentMarkSweep.info: 5s
#monitor.jvm.gc.ConcurrentMarkSweep.debug: 2s
